<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>writings</title><link href="http://blog.sitongpeng.com/" rel="alternate"></link><link href="http://blog.sitongpeng.com/feeds/2012.atom.xml" rel="self"></link><id>http://blog.sitongpeng.com/</id><updated>2012-12-18T17:03:00-08:00</updated><entry><title>Project Euler 6</title><link href="http://blog.sitongpeng.com/posts/project-euler-6.html" rel="alternate"></link><updated>2012-12-18T17:03:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-12-18:posts/project-euler-6.html</id><summary type="html">&lt;p&gt;You are asked to find the difference between the square of the sum and
the sum of the squares of the first 100 natural numbers. So: (1 + 2 + …
+ 99 + 100)^2 - (1^2 + 2^2 + … + 99^2 + 100^2).&lt;/p&gt;
&lt;p&gt;This is trivially easy to brute force on a computer, especially with the
&lt;tt class="docutils literal"&gt;range(1,101)&lt;/tt&gt; function in python. Two loops will get you a solution
in practically no time. Alternatively, a reduce and a map &amp;amp; reduce will
get you there in no time too.&lt;/p&gt;
&lt;p&gt;However, this problem is actually probably faster to just do by hand. To
the best of my knowledge, this is the first one of the Project Euler
problems that is like this. You just need to be familiar with two famous
series in mathematics. I have the 1 + 2 + … + 99 + 100 series
internalized, it is simply n(n+1)/2. I had to look up the 1^2 + 2^2 + …
+ 99^2 + 100^2 power series, but the formula is n(n+1)(2n+1)/6. Here’s
the code I wrote since I wanted something I could save in my Project
Euler folder.&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
# Two famous seriesdef sum_of_squares(n):    return (n)*(n+1)*(2*n+1)/6def square_of_sum(n):    return (n*(n+1)/2)**2def main(n):    return sum_of_squares(n) - square_of_sum(n)
&lt;/pre&gt;
&lt;/p&gt;&lt;/p&gt;</summary><category term="project euler 6"></category><category term="python"></category><category term="sum of squares"></category><category term="square of sum"></category><category term="math"></category><category term="map"></category><category term="reduce"></category><category term="loops"></category></entry><entry><title>HTML Checkbox Form Gotcha</title><link href="http://blog.sitongpeng.com/posts/html-checkbox-form-gotcha.html" rel="alternate"></link><updated>2012-12-17T22:35:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-12-17:posts/html-checkbox-form-gotcha.html</id><summary type="html">&lt;p&gt;I’ve been working on implementing a toy web app on &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;. It’s been
very straightforward so far, the work I did on my WSGI server was a good
stepping stone into this WSGI framework. I just stumbled upon something
I will refer to as a HTML Checkbox Form Gotcha. HTMLCFG? So basically, I
am building the login page for the web app and I have a checkbox that I
wanted to be a boolean for whether the user was registering for the
first time or just logging in normally.&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
&amp;lt;input name=&amp;quot;register&amp;quot; type=&amp;quot;checkbox&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Then, I would use the following code in Flask access the state of the
checkbox:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
if request.form['register']:# do stuff
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;However, I kept getting a HTTP 400 Bad Request. After some sleuthing, it
turns out that POST requests don’t include unchecked checkboxes. So
there is no &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;request.form['register']&lt;/span&gt;&lt;/tt&gt; entry if the checkbox isn’t
checked by the user before submission. Here’s how I ended up working
around it.&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
registering = Falseif 'register' in request.form:    # do register logicelse:    # do normal login logic
&lt;/pre&gt;
&lt;/p&gt;&lt;/p&gt;</summary><category term="gotcha"></category><category term="html"></category><category term="checkbox"></category><category term="python"></category><category term="flask"></category><category term="http 400"></category><category term="post"></category></entry><entry><title>Project Euler 5</title><link href="http://blog.sitongpeng.com/posts/project-euler-5.html" rel="alternate"></link><updated>2012-12-17T00:22:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-12-17:posts/project-euler-5.html</id><summary type="html">&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers
from 1 to 10 without any remainder. What is the smallest positive number
that is evenly divisible by all of the numbers from 1 to 20?&lt;/p&gt;
&lt;p&gt;I’ve found that I usually want to solve these problems using a more
functional programming style. For instance, my solution uses uses a
recursive &lt;strong&gt;prime_factorization&lt;/strong&gt; helper function and reduce. But then
again, it also uses iterative loops, but only because I didn’t feel like
keeping track of the laundry list of factors recursively :). Anyways,
the format of my solution is as such:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Initial notes about the problem&lt;/li&gt;
&lt;li&gt;General solution for any positive integer n.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
# 1, 2, 3, 4, 5, 6, 7, 8, 9, 10# Basically 2520 = product of the prime factors of the above numbers# So... 2520 = 2*3*2*5*7*2*3# A general solution would check if the prime factorization of some 'n'# is already in the set of prime factorizations from the 'n-1' term.def prime_factorization(num, divisor=2):    &amp;quot;&amp;quot;&amp;quot;Given an non-neg int num, return the prime factorization in a list.&amp;quot;&amp;quot;&amp;quot;    if num &amp;lt; 2:        return [num]    elif num % divisor:        divisor += 1        return prime_factorization(num, divisor)    else:        return prime_factorization(num/divisor, divisor) + [divisor]def product(a, b):    &amp;quot;&amp;quot;&amp;quot;Returns a * b.&amp;quot;&amp;quot;&amp;quot;    return a * bdef super_product(num):    &amp;quot;&amp;quot;&amp;quot;Given an integer num, find the smallest positive number that is    divisible by all integers [1, num].    &amp;quot;&amp;quot;&amp;quot;    factors = []    while num &amp;gt; 1:        pf = prime_factorization(num)        for factor in pf:            try:                factors.remove(factor)            except ValueError:                continue        factors += pf        num -= 1    return reduce(product, factors)
&lt;/pre&gt;
&lt;/p&gt;&lt;/p&gt;</summary><category term="project euler 5"></category><category term="prime factorization"></category><category term="functional programming"></category><category term="recursion"></category><category term="python"></category></entry><entry><title>On generators and len</title><link href="http://blog.sitongpeng.com/posts/on-generators-and-len.html" rel="alternate"></link><updated>2012-12-05T18:21:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-12-05:posts/on-generators-and-len.html</id><summary type="html">&lt;p&gt;So one of the WSGI server specifications is that if a WSGI application
doesn’t supply the Content-Length response header, it is the job of the
WSGI server to try to determine the Content-Length of the response body
(if possible). This is straightforward enough for the average WSGI app,
which will return the response body in a list object. However, WSGI apps
also have the option of using a generator to return the response body
(since the specification only requires that the app return is an
iterable).&lt;/p&gt;
&lt;div class="section" id="so-can-we-apply-the-len-function-to-the-output-of-a-generator"&gt;
&lt;h2&gt;So can we apply the len function to the output of a generator?&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;The answer is no. Generators are simple constructs that just yield
values when you iterate on them, immediately passing output along. And
since generators keep no memory of past generated values, they have no
idea what the length of their output is or will be. Therefore they don’t
have a len attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-do-we-send-the-client-the-content-length-if-the-app-is-a-generator"&gt;
&lt;h2&gt;So how do we send the client the Content-Length if the app is a generator?&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;Well, in HTTP/1.1, some servers and clients support the chunked transfer
coding. This allows servers to send response bodies in chunks, as they
are available. Each chunk will have it’s own Content-Length. I hope to
support chunked transferring in &lt;a class="reference external" href="https://github.com/stoneG/whiskey"&gt;whiskey&lt;/a&gt;, so I can always provide a
Content-Length. I’ll be sure to post about my implementation.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="whiskey"></category><category term="python"></category><category term="http"></category><category term="generators"></category><category term="len"></category><category term="wsgi"></category><category term="content-length"></category><category term="server"></category><category term="client"></category><category term="response"></category></entry><entry><title>Become a better programmer</title><link href="http://blog.sitongpeng.com/posts/become-a-better-programmer.html" rel="alternate"></link><updated>2012-12-04T19:14:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-12-04:posts/become-a-better-programmer.html</id><summary type="html">&lt;p&gt;Hacker School &lt;a class="reference external" href="https://www.hackerschool.com/blog/10-winter-2013-applications-open"&gt;Winter 2013 applications&lt;/a&gt; are open TODAY! If you’re
interested, I’ll save you the time and say you &lt;strong&gt;SHOULD&lt;/strong&gt; apply. Let me
know if you’re interested and have questions :)&lt;/p&gt;
&lt;/p&gt;</summary><category term="hacker school"></category><category term="become a better programmer"></category><category term="language agnostic"></category><category term="ycombinator"></category><category term="hacker news"></category><category term="python"></category><category term="ruby"></category><category term="c++"></category><category term="erlang"></category><category term="haskell"></category><category term="javascript"></category><category term="java"></category><category term="objective c"></category></entry><entry><title>Removing punctuation from a text string</title><link href="http://blog.sitongpeng.com/posts/removing-punctuation-from-a-text-string.html" rel="alternate"></link><updated>2012-12-03T06:07:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-12-03:posts/removing-punctuation-from-a-text-string.html</id><summary type="html">&lt;p&gt;I was working on a side project last week. It’s called &lt;a class="reference external" href="https://github.com/stoneG/linguist"&gt;Linguist&lt;/a&gt; and
one of the components of the project requires me to have a large corpus
of English word frequencies. After some research, I decided I could
focus on all the words in the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Official_Tournament_and_Club_Word_List"&gt;Scrabble Official Word List (OWL)&lt;/a&gt; and
wrangle out the word counts using all English books on &lt;a class="reference external" href="http://www.gutenberg.org/"&gt;Project
Gutenberg&lt;/a&gt;. This was a bit more strenuous of an undertaking than I had
anticipated, as Project Gutenberg’s English library is quite sizable.
So, obviously, I first need a quick way to remove all punctuation from
these ebooks so I can iterate through them to build my word count
dictionary.&lt;/p&gt;
&lt;div class="section" id="so-whats-a-fast-way-to-do-that-in-python"&gt;
&lt;h2&gt;So what’s a fast way to do that in Python?&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;Let’s consider using: string.replace, sets, regex, and string.translate.
We’ll use &lt;a class="reference external" href="http://www.gutenberg.org/ebooks/46"&gt;A Christmas Carol&lt;/a&gt; as our benchmark text, since it’s
December.&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
f = open('A_Christmas_Carol.txt', 'r')book = f.read()f.close()
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="methods"&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;&lt;pre class="literal-block"&gt;
# setspunctuation_set = set(string.punctuation)def set_method(book):    return ''.join(char for char in book if char not in punctuation_set)# regexpunctuation_regex = re.compile('[{0}]'.format(re.escape(string.punctuation)))def regex_method(book):    return punctuation_regex.sub('', book)# string.replacedef replace_method(book):    for punctuation in string.punctuation:        book = book.replace(punctuation, '')    return book# string.translatedef translate_method(book):    return book.translate(None, string.punctuation)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;&lt;pre class="literal-block"&gt;
sets     : 0.0455198287964 seconds.regex    : 0.0134680271149 seconds.replace  : 0.0041608810424 seconds.translate: 0.0006558895111 seconds.
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;So, when you’re looking at stripping punctuation from gigabytes of text
files, it’s safe to say that you should be using string.translate.&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
</summary><category term="python"></category><category term="removing"></category><category term="punctuation"></category><category term="from"></category><category term="a"></category><category term="text"></category><category term="string"></category><category term="benchmark"></category><category term="set"></category><category term="regex"></category><category term="translate"></category><category term="replace"></category><category term="linguist"></category><category term="project gutenberg"></category><category term="scrabble"></category><category term="a christmas carol"></category></entry><entry><title>"Furthermore HTTP has become quite popular lately and browsers are no longer the only clients that..."</title><link href="http://blog.sitongpeng.com/posts/furthermore-http-has-become-quite-popular-lately-and-browsers-are-no-longer-the-only-clients-that.html" rel="alternate"></link><updated>2012-11-26T16:58:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-11-26:posts/furthermore-http-has-become-quite-popular-lately-and-browsers-are-no-longer-the-only-clients-that.html</id><summary type="html">&lt;p&gt;“Furthermore HTTP has become quite popular lately and browsers are no
longer the only clients that are using HTTP. For instance, many revision
control system use it.”
- &lt;em&gt;`Flask Quickstart Guide`_&lt;/em&gt;&lt;/p&gt;
</summary><category term="flask"></category><category term="python"></category><category term="HTTP"></category><category term="revision control"></category><category term="browsers"></category></entry><entry><title>from constants import *</title><link href="http://blog.sitongpeng.com/posts/from-constants-import.html" rel="alternate"></link><updated>2012-11-13T21:50:00-08:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-11-13:posts/from-constants-import.html</id><summary type="html">&lt;p&gt;Is this pythonic? According to the Python documentation on &lt;strong&gt;`Language
Constructs You Should Not Use`_&lt;/strong&gt;, the following tops the list:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
from module import *
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;However, here’s a problem I’m running into. I want some constants to be
use-able over a couple different modules, but I don’t want to call
constants.FOO every time I need to use them. So, what’s a guy to do?&lt;/p&gt;
&lt;p&gt;Well, I’m going to throw “caution” to the wind and just create a
“constants.py” file and attach a “from constants import *” to the files
I need these constants in. I feel like this situation falls under
category 3 of the &lt;strong&gt;`When It Is Just Fine`_&lt;/strong&gt; section.&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;/p&gt;</summary><category term="pythonic"></category><category term="constants"></category><category term="python"></category></entry><entry><title>Project Euler 3</title><link href="http://blog.sitongpeng.com/posts/project-euler-3.html" rel="alternate"></link><updated>2012-11-01T00:38:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-11-01:posts/project-euler-3.html</id><summary type="html">&lt;p&gt;I’ve updated the method on this solution after discussing and optimizing
with &lt;a class="reference external" href="http://www.jamesshieh.com"&gt;James&lt;/a&gt;. Here is his code in Python:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
n = 600851475143pfact = 0i = 2while i &amp;lt; n+1:    while n % i == 0:        n = n/i        pfact = i    i += 1print pfact
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;The awesome thing about this code (besides that it’s so short), is that
it naturally pulls out all the prime factors of a number in two while
loops. It’s pitfall is when you are given large prime number to begin
with (such as 600851475149), these loops would have to count up to the
prime number before it found it.&lt;/p&gt;
&lt;p&gt;My solution’s pitfall is if you are given a number that has numerous
small prime factors, such as 2^32, which only has the prime factor 2.
However, by merging the ideas of my and James’ solution, we can come up
with a much more optimal solution that avoids both of our pitfalls:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
largestPrimeFactor = function(num) {  i = 2    if(isPrime(num)){        return(num)  }    while(i &amp;lt; num){       while(num % i == 0) { # Used to be if(num % i == 0)                        num = num/i # redefine num by pulling out the lowest prime factor          if(isPrime(num)){                return(num)          }        }        i = i + 1    }}
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;So, 2^32 and 600581475149 both run instantly instead of never.&lt;/p&gt;
&lt;/p&gt;</summary><category term="project euler"></category><category term="pair programming"></category><category term="python"></category><category term="R"></category><category term="prime factors"></category></entry><entry><title>Favorite term of the day</title><link href="http://blog.sitongpeng.com/posts/favorite-term-of-the-day.html" rel="alternate"></link><updated>2012-10-24T20:32:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-24:posts/favorite-term-of-the-day.html</id><summary type="html">&lt;p&gt;In parallel computing, a problem in which all the sub-processes are
completely independent and do not rely on each other is called an
“Embarrassingly Parallel Problem”. So I guess the routine eureka
exclamation in this field is: “Ah! Turns out this is an embarrassingly
parallel problem!” *facepalm*.&lt;/p&gt;
&lt;/p&gt;</summary><category term="parallel computing"></category><category term="mapreduce"></category><category term="embarrassingly parallel"></category></entry><entry><title>What I've learned about UDP and TCP (today)</title><link href="http://blog.sitongpeng.com/posts/what-ive-learned-about-udp-and-tcp-today.html" rel="alternate"></link><updated>2012-10-18T21:15:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-18:posts/what-ive-learned-about-udp-and-tcp-today.html</id><summary type="html">&lt;p&gt;User Datagram Protocol (UDP) is a type of internet protocol that is well
suited for sending no more than a few one-time packets. There is no
handshake process, and all forms of communication must be built into the
client and server sides respectively. Generally processes that utilize
the UDP structure accept that packets may be lost in delivery or
translation and prefer lost data over delayed data. Usually these are
applications that run on real-time such as multiplayer games (where it’s
okay to skip a frame since your next packet will place you in the right
spot) or streaming media (better to get a hiccup than random sound clips
out of place). Also, UDP gives way to a fancy ability called
broadcasting, which allows you to blast a local network with the same
packet all at once. This is good for updating some applications that
should be synced up over the network.&lt;/p&gt;
&lt;p&gt;Transmission Control Protocol (TCP) is a type of internet protocol that
is well suited for sending reliable, streams of data in an established
connection between server and client. Before any data is transferred, a
handshake must be completed between server and client. This is called
the SYN, SYN-AWK, AWK process, where the client will send a SYNchronize
packet to the server, the server will receive the packet and send back a
SYNchronize-ACKnowledgement to the client, and the client will confirm
the ACKnowledgement back to the server. This process establishes the
connection between server and client on the specified ports. Data is
then transferred around in multiple bursts, which is why TCP is not used
by applications sending one-time information. Packets may still be lost,
but the receiving party will determine if this happens and send
re-transmission requests to the sender and reassemble the full structure
of the packets later. If there is a lot of congestion in the data stream
and the server cannot handle requests quickly enough, TCP applications
will generally practice some prudence in sending future packets -
limiting the rate of transmission as congestion occurs. The majority of
network applications use follow the TCP structure.&lt;/p&gt;
&lt;/p&gt;</summary><category term="note to self"></category><category term="TCP"></category><category term="UDP"></category><category term="networking"></category><category term="python"></category></entry><entry><title>You have a port number, what service does it refer to?</title><link href="http://blog.sitongpeng.com/posts/you-have-a-port-number-what-service-does-it-refer-to.html" rel="alternate"></link><updated>2012-10-17T19:24:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-17:posts/you-have-a-port-number-what-service-does-it-refer-to.html</id><summary type="html">&lt;p&gt;On Unix machines you can go into your handy dandy service list. The path
is as follows:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
/etc/services
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;HTTP is port 80.&lt;/p&gt;
&lt;/p&gt;</summary><category term="fyi"></category><category term="ports"></category><category term="unix"></category><category term="HTTP"></category><category term="hypertext transfer protocol"></category></entry><entry><title>IP Addresses</title><link href="http://blog.sitongpeng.com/posts/ip-addresses.html" rel="alternate"></link><updated>2012-10-17T17:51:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-17:posts/ip-addresses.html</id><summary type="html">&lt;p&gt;IP Addresses are network addresses that are (for IPv4) four bytes long,
with each byte separated by a period. Recall that a byte is generally 8
bits, so the byte can take a value of 0 - 255, which is a range of 2^8 =
256 values.&lt;/p&gt;
&lt;p&gt;Hence, something like this: 130.192.24.200&lt;/p&gt;
&lt;p&gt;IP Addresses are important because when computer want to send packets of
data anywhere, it needs a.) the data to send (binary strings) and b.) a
destination (IP Address).&lt;/p&gt;
&lt;/p&gt;</summary><category term="clearingthefog"></category><category term="internet protocol"></category><category term="IP addresses"></category></entry><entry><title>TypeError: this constructor takes no arguments</title><link href="http://blog.sitongpeng.com/posts/typeerror-this-constructor-takes-no-arguments.html" rel="alternate"></link><updated>2012-10-08T19:45:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-08:posts/typeerror-this-constructor-takes-no-arguments.html</id><summary type="html">&lt;p&gt;If you’re ever creating an instance of your newly defined class object
and you get this error - even though you &lt;strong&gt;definitely&lt;/strong&gt; specified that
you need to call the class with some parameters, I may know what your
problem is.&lt;/p&gt;
&lt;p&gt;Solution to your confusion: __int__&amp;nbsp;!= __init__&lt;/p&gt;
&lt;p&gt;(Yes, I just encountered this in my code *facepalm*)&lt;/p&gt;
&lt;/p&gt;</summary><category term="coding PSA"></category><category term="python"></category><category term="exception"></category><category term="classobj"></category><category term="class"></category><category term="object"></category></entry><entry><title>Unicode pain, no more!</title><link href="http://blog.sitongpeng.com/posts/unicode-pain-no-more.html" rel="alternate"></link><updated>2012-10-05T19:17:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-05:posts/unicode-pain-no-more.html</id><summary type="html">&lt;p&gt;FYI and Note To Self:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nedbatchelder.com/text/unipain.html"&gt;This&lt;/a&gt; is something I have been experiencing intimately while I have
been building a Wikipedia bot with some text parsing requirements.
Bookmark and study this lecture on what byte strings and unicode strings
really are. Do it now.&lt;/p&gt;
&lt;p&gt;Unicode sandwich.&lt;/p&gt;
&lt;/p&gt;</summary><category term="unicode"></category><category term="python 2"></category><category term="python 3"></category><category term="byte"></category><category term="bytestring"></category></entry><entry><title>Installing numpy for python 3 in Ubuntu</title><link href="http://blog.sitongpeng.com/posts/installing-numpy-for-python-3-in-ubuntu.html" rel="alternate"></link><updated>2012-10-04T19:00:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-04:posts/installing-numpy-for-python-3-in-ubuntu.html</id><summary type="html">&lt;p&gt;^ Note to self&lt;/p&gt;
&lt;p&gt;See the forum posts &lt;a class="reference external" href="http://ubuntuforums.org/showthread.php?t=1818188"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/p&gt;</summary><category term="numpy"></category><category term="python"></category><category term="ubuntu"></category></entry><entry><title>Using extended slice syntax to reverse strings</title><link href="http://blog.sitongpeng.com/posts/using-extended-slice-syntax-to-reverse-strings.html" rel="alternate"></link><updated>2012-10-03T15:33:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-03:posts/using-extended-slice-syntax-to-reverse-strings.html</id><summary type="html">&lt;p&gt;^ Note to self&lt;/p&gt;
&lt;p&gt;Python has no built in method to reverse strings (one exists for lists:
list.reverse()). However, using extended slice syntax, you can reverse
strings in a very novel way:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
mystr = 'hello world'mystr[::-1]# &amp;gt; 'dlrow olleh'
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;[begin:end:step]&lt;/p&gt;
&lt;/p&gt;</summary><category term="python"></category><category term="string"></category><category term="reverse"></category><category term="pythonic"></category><category term="extended slice syntax"></category><category term="note to self"></category></entry><entry><title>Setup Github on Ubuntu [FYI]</title><link href="http://blog.sitongpeng.com/posts/setup-github-on-ubuntu-fyi.html" rel="alternate"></link><updated>2012-10-01T19:24:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-10-01:posts/setup-github-on-ubuntu-fyi.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://help.github.com/articles/set-up-git"&gt;This&lt;/a&gt; works. They wrote a good, solid guide for this.&lt;/p&gt;
&lt;/p&gt;</summary><category term="fyi"></category><category term="git"></category><category term="github"></category><category term="ubuntu"></category></entry><entry><title>Moral victory of the day: figuring out how to publish content on...</title><link href="http://blog.sitongpeng.com/posts/moral-victory-of-the-day-figuring-out-how-to-publish-content-on.html" rel="alternate"></link><updated>2012-09-30T04:05:00-07:00</updated><author><name>Sitong Peng</name></author><id>tag:blog.sitongpeng.com,2012-09-30:posts/moral-victory-of-the-day-figuring-out-how-to-publish-content-on.html</id><summary type="html">&lt;p&gt;&lt;img alt="image0" src="http://24.media.tumblr.com/tumblr_mb5a1eiKkO1rdfx5yo1_400.png" /&gt;&lt;/p&gt;
&lt;p&gt;Moral victory of the day: figuring out how to publish content on
facebook through my ubuntu terminal using cURL and the FB API.&lt;/p&gt;
&lt;/p&gt;</summary><category term="facebook"></category><category term="graph explorer"></category><category term="api"></category><category term="curl"></category><category term="fb api"></category><category term="ubuntu"></category></entry></feed>